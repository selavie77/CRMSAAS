@{
    var userEmail = "Loading...";
    var avatarUrl = "/noimage.png";
    var appName = "CRM";
}

<div id="sidebar" class="sidebar pb-3">
    <nav class="navbar pt-0">
        <div class="col-md-12 text-center pt-3 mb-4 d-grid align-items-center brand-container" style="">
            <a href="#" class="navbar-brand mx-4 mb-3">
                <h3 class="text-white"><i class="fas fa-tachometer-alt me-2" style="color: var(--primary);"></i>@appName</h3>
            </a>
        </div>

        <div class="d-flex align-items-center ms-4 mb-4">
            <div class="position-relative">
                <img id="AvatarImageSide" class="rounded-circle border border-2 border-white" src="@avatarUrl" alt="" style="width: 40px; height: 40px;">
                <div class="bg-success rounded-circle border border-2 border-white position-absolute end-0 bottom-0 p-1"></div>
            </div>
            <div class="ms-3">
                <h6 class="mb-0" id="userEmail">@userEmail</h6>
            </div>
        </div>
        <div id="navbarnav" class="navbar-nav w-100">
            <div id="mainMenuContainer">
                <div id="mainMenu"></div>
            </div>
        </div>
    </nav>
</div>

@* _sidebar.cshtml *@
<script>
    document.addEventListener('DOMContentLoaded', function () {
        try {
            const email = StorageManager.getEmail();
            const userEmail = `${email}`;
            document.getElementById('userEmail').textContent = userEmail;

            const currentUrl = window.location.pathname;
            const firstSegment = currentUrl.split('/')[1];

            function filterMenu(menuData, userRoles) {
                const childMenus = menuData.filter(menu => {
                    if (menu.navURL) {
                        const firstSegment = menu.navURL.split('/')[1];
                        return userRoles.some(role => role.toLowerCase() === firstSegment.toLowerCase());
                    }
                    return false;
                });

                const validChildIds = new Set(childMenus.map(menu => menu.id));
                const parentIds = new Set(childMenus.map(menu => menu.pid));
                return menuData.filter(menu => validChildIds.has(menu.id) || parentIds.has(menu.id));
            }

            function updateMenuSelection(menuData, segment) {
                const parentMap = {};
                menuData.forEach(item => {
                    parentMap[item.id] = item;
                });

                menuData.forEach(item => {
                    item.isSelected = false;
                    item.expanded = false;
                    if (item.navURL && item.navURL.includes(`/${segment}`)) {
                        item.isSelected = true;
                        let parentId = item.pid;
                        while (parentId) {
                            const parent = parentMap[parentId];
                            if (parent) {
                                parent.expanded = true;
                                parentId = parent.pid;
                            } else {
                                break;
                            }
                        }
                    }
                });

                return menuData;
            }

            const userRoles = StorageManager.getUserRoles();
            let menuData = StorageManager.getMenuNavigation();
            const filteredMenu = filterMenu(menuData, userRoles);
            menuData = updateMenuSelection(filteredMenu, firstSegment);

            const mainMenu = new ej.navigations.TreeView({
                fullRowNavigable: true,
                fields: {
                    dataSource: menuData,
                    id: 'id',
                    text: 'name',
                    selected: 'isSelected',
                    parentID: 'pid',
                    hasChildren: 'hasChild',
                    expanded: 'expanded',
                    navigateUrl: 'navURL',
                },
                enablePersistence: false,
            });
            mainMenu.appendTo('#mainMenu');

        } catch (error) {
            console.error('Error fetching data from StorageManager:', error);
        }
    });
</script>